package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.DownloadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWNLOAD_INFO.
*/
public class DownloadInfoDao extends AbstractDao<DownloadInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_INFO";

    /**
     * Properties of entity DownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Filename = new Property(2, String.class, "filename", false, "FILENAME");
        public final static Property From = new Property(3, String.class, "from", false, "FROM");
        public final static Property To = new Property(4, String.class, "to", false, "TO");
        public final static Property UploadTime = new Property(5, java.util.Date.class, "uploadTime", false, "UPLOAD_TIME");
        public final static Property Percent = new Property(6, Integer.class, "percent", false, "PERCENT");
        public final static Property State = new Property(7, Integer.class, "state", false, "STATE");
        public final static Property AutoSyncDownload = new Property(8, Boolean.class, "autoSyncDownload", false, "AUTO_SYNC_DOWNLOAD");
        public final static Property TotalSize = new Property(9, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property HashCode = new Property(10, Integer.class, "hashCode", false, "HASH_CODE");
    };


    public DownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER' TEXT NOT NULL ," + // 1: user
                "'FILENAME' TEXT NOT NULL ," + // 2: filename
                "'FROM' TEXT NOT NULL ," + // 3: from
                "'TO' TEXT NOT NULL ," + // 4: to
                "'UPLOAD_TIME' INTEGER NOT NULL ," + // 5: uploadTime
                "'PERCENT' INTEGER," + // 6: percent
                "'STATE' INTEGER," + // 7: state
                "'AUTO_SYNC_DOWNLOAD' INTEGER," + // 8: autoSyncDownload
                "'TOTAL_SIZE' INTEGER," + // 9: totalSize
                "'HASH_CODE' INTEGER);"); // 10: hashCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser());
        stmt.bindString(3, entity.getFilename());
        stmt.bindString(4, entity.getFrom());
        stmt.bindString(5, entity.getTo());
        stmt.bindLong(6, entity.getUploadTime().getTime());
 
        Integer percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(7, percent);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(8, state);
        }
 
        Boolean autoSyncDownload = entity.getAutoSyncDownload();
        if (autoSyncDownload != null) {
            stmt.bindLong(9, autoSyncDownload ? 1l: 0l);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(10, totalSize);
        }
 
        Integer hashCode = entity.getHashCode();
        if (hashCode != null) {
            stmt.bindLong(11, hashCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadInfo readEntity(Cursor cursor, int offset) {
        DownloadInfo entity = new DownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // user
            cursor.getString(offset + 2), // filename
            cursor.getString(offset + 3), // from
            cursor.getString(offset + 4), // to
            new java.util.Date(cursor.getLong(offset + 5)), // uploadTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // percent
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // state
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // autoSyncDownload
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // totalSize
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // hashCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.getString(offset + 1));
        entity.setFilename(cursor.getString(offset + 2));
        entity.setFrom(cursor.getString(offset + 3));
        entity.setTo(cursor.getString(offset + 4));
        entity.setUploadTime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setPercent(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAutoSyncDownload(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setTotalSize(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setHashCode(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
